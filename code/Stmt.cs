// automatically generated by the ast_generator

using System.Collections.Generic;
using Any = System.Object;

public abstract class Stmt
{
	public abstract R Accept<R>(IVisitor<R> visitor);

	public interface IVisitor<R>
	{
		R VisitBlockStmt(Block stmt);
		R VisitExpressionStmt(Expression stmt);
		R VisitPrintStmt(Print stmt);
		R VisitVarStmt(Var stmt);
	}

	public class Block : Stmt
	{
		public List<Stmt> statements;

		public Block(List<Stmt> statements)
		{
			this.statements = statements;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitBlockStmt(this);
		}
	}

	public class Expression : Stmt
	{
		public Expr expression;

		public Expression(Expr expression)
		{
			this.expression = expression;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitExpressionStmt(this);
		}
	}

	public class Print : Stmt
	{
		public Expr expression;

		public Print(Expr expression)
		{
			this.expression = expression;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitPrintStmt(this);
		}
	}

	public class Var : Stmt
	{
		public Token name;
		public Expr initializer;

		public Var(Token name, Expr initializer)
		{
			this.name = name;
			this.initializer = initializer;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitVarStmt(this);
		}
	}
}
