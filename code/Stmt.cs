// automatically generated by the ast_generator

using System.Collections.Generic;
using Any = System.Object;

public abstract class Stmt
{
	public abstract R Accept<R>(IVisitor<R> visitor);

	public interface IVisitor<R>
	{
		R VisitBlockStmt(Block stmt);
		R VisitClassStmt(Class stmt);
		R VisitExpressionStmt(Expression stmt);
		R VisitFunctionStmt(Function stmt);
		R VisitIfStmt(If stmt);
		R VisitReturnStmt(Return stmt);
		R VisitVarStmt(Var stmt);
		R VisitWhileStmt(While stmt);
	}

	public class Block : Stmt
	{
		public List<Stmt> statements;

		public Block(List<Stmt> statements)
		{
			this.statements = statements;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitBlockStmt(this);
		}
	}

	public class Class : Stmt
	{
		public Token name;
		public Expr.Variable superclass;
		public List<Stmt.Function> methods;

		public Class(Token name, Expr.Variable superclass, List<Stmt.Function> methods)
		{
			this.name = name;
			this.superclass = superclass;
			this.methods = methods;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitClassStmt(this);
		}
	}

	public class Expression : Stmt
	{
		public Expr expression;

		public Expression(Expr expression)
		{
			this.expression = expression;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitExpressionStmt(this);
		}
	}

	public class Function : Stmt
	{
		public Token name;
		public List<Token> parameters;
		public List<Stmt> body;

		public Function(Token name, List<Token> parameters, List<Stmt> body)
		{
			this.name = name;
			this.parameters = parameters;
			this.body = body;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitFunctionStmt(this);
		}
	}

	public class If : Stmt
	{
		public Expr condition;
		public Stmt thenBranch;
		public Stmt elseBranch;

		public If(Expr condition, Stmt thenBranch, Stmt elseBranch)
		{
			this.condition = condition;
			this.thenBranch = thenBranch;
			this.elseBranch = elseBranch;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitIfStmt(this);
		}
	}

	public class Return : Stmt
	{
		public Token keyword;
		public Expr value;

		public Return(Token keyword, Expr value)
		{
			this.keyword = keyword;
			this.value = value;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitReturnStmt(this);
		}
	}

	public class Var : Stmt
	{
		public Token name;
		public Expr initializer;

		public Var(Token name, Expr initializer)
		{
			this.name = name;
			this.initializer = initializer;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitVarStmt(this);
		}
	}

	public class While : Stmt
	{
		public Expr condition;
		public Stmt body;

		public While(Expr condition, Stmt body)
		{
			this.condition = condition;
			this.body = body;
		}

		public override R Accept<R>(IVisitor<R> visitor)
		{
			return visitor.VisitWhileStmt(this);
		}
	}
}
